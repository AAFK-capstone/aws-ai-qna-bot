{
  "Resources": {
    "WageSlotType": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexSlotType",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAWageSlotType-${AWS::StackName}"},
        "createVersion": true,
        "description": "QNA Wage Slot Type - 4.7.2 - v1",
        "parentSlotTypeSignature": "AMAZON.AlphaNumeric",
        "slotTypeConfigurations": [
          {"regexConfiguration": {"pattern": "[0-9]{1,7}"}}
        ]
      }
    },
    "QNAWage": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "WageIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAWageBot-${AWS::StackName}"},
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "WageIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {"contentType": "PlainText", "content": "Please repeat your wage."}
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        },
        "description": "QNA Wage elicit response - 4.7.2 - v1"
      }
    },
    "WageIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAWageIntent-${AWS::StackName}"},
        "createVersion": true,
        "description": "Parse wage responses.",
        "sampleUtterances": [
          "My salary is {Wage}",
          "My wage is {Wage}",
          "{Wage}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "Is {Wage} correct (Yes/No)?",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "Please let me what your wage was again?",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "Wage",
            "slotType": {"Ref": "WageSlotType"},
            "slotTypeVersion": "QNABOT-AUTO-ASSIGNED",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What is your wage?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "WageAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAWage"},
        "name": "live",
        "description": "QNA Wage Alias - 4.7.2 - v1"
      }
    },
    "SocialSecuritySlotType": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexSlotType",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNASocialSecuritySlotType-${AWS::StackName}"},
        "createVersion": true,
        "description": "QNA Social Security Slot Type - 4.7.2 - v1",
        "parentSlotTypeSignature": "AMAZON.AlphaNumeric",
        "slotTypeConfigurations": [
          {"regexConfiguration": {"pattern": "[0-9]{3}-[0-9]{2}-[0-9]{4}"}}
        ]
      }
    },
    "QNASocialSecurity": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "SocialSecurityIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNASocialSecurityBot-${AWS::StackName}"},
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "SocialSecurityIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {
              "contentType": "PlainText",
              "content": "Please repeat your social security number."
            }
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        },
        "description": "QNA Social Security elicit response - 4.7.2 - v1"
      }
    },
    "SocialSecurityIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNASocialSecurityIntent-${AWS::StackName}"},
        "createVersion": true,
        "description": "QNA Social Security Intent - 4.7.2 - v1",
        "sampleUtterances": [
          "The social security number is {SSN}",
          "My social security number is {SSN}",
          "It is {SSN}",
          "{SSN}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "Is {SSN} correct (Yes/No)?",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "Please let me know the social security number again?",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "SSN",
            "slotType": {"Ref": "SocialSecuritySlotType"},
            "slotTypeVersion": "QNABOT-AUTO-ASSIGNED",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {
                  "contentType": "PlainText",
                  "content": "What is your social security number?"
                }
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "SocialSecurityAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNASocialSecurity"},
        "name": "live",
        "description": "QNA Social Security Alias - 4.7.2 - v1"
      }
    },
    "PinSlotType": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexSlotType",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAPinSlotType-${AWS::StackName}"},
        "description": "QNA Pin Slot Type - 4.7.2 - v1",
        "parentSlotTypeSignature": "AMAZON.AlphaNumeric",
        "createVersion": true,
        "slotTypeConfigurations": [
          {"regexConfiguration": {"pattern": "[0-9]{4}"}}
        ]
      }
    },
    "QNAPin": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "PinIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAPinBot-${AWS::StackName}"},
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "PinIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {
              "contentType": "PlainText",
              "content": "I'm sorry I did not get all the digits, please re-enter all digits."
            }
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        },
        "description": "QNA Pin elicit response - 4.7.2 - v1"
      }
    },
    "PinIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAPinIntent-${AWS::StackName}"},
        "description": "Parse pin responses.",
        "createVersion": true,
        "sampleUtterances": [
          "The pin number is {Pin}",
          "My pin number is {Pin}",
          "It is {Pin}",
          "{Pin}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "<speak>Is <say-as interpret-as=\"digits\">{Pin}</say-as> correct (Yes or No)?</speak>",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "I'm sorry I did not get all the digits, please re-enter all digits.",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "Pin",
            "slotType": {"Ref": "PinSlotType"},
            "slotTypeVersion": "QNABOT-AUTO-ASSIGNED",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {
                  "contentType": "PlainText",
                  "content": "What are all the digits?"
                }
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "PinAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAPin"},
        "name": "live",
        "description": "QNA Pin Alias - 4.7.2 - v1"
      }
    },
    "QNAPinNoConfirm": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "PinIntentNoConfirm",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAPinBotNoConfirm-${AWS::StackName}"},
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "PinIntentNoConfirm"}}],
        "clarificationPrompt": {
          "messages": [
            {
              "contentType": "PlainText",
              "content": "I'm sorry I did not get all the digits, please re-enter all digits."
            }
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        },
        "description": "QNA Pin No Confirm elicit response - 4.7.2 - v1"
      }
    },
    "PinIntentNoConfirm": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAPinIntentNoConfirm-${AWS::StackName}"},
        "description": "Parse pin responses.",
        "createVersion": true,
        "sampleUtterances": [
          "The pin number is {Pin}",
          "My pin number is {Pin}",
          "It is {Pin}",
          "{Pin}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "Pin",
            "slotType": {"Ref": "PinSlotType"},
            "slotTypeVersion": "QNABOT-AUTO-ASSIGNED",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {
                  "contentType": "PlainText",
                  "content": "What are all the digits?"
                }
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "PinNoConfirmAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAPinNoConfirm"},
        "name": "live",
        "description": "QNA Pin No Confirm Alias - 4.7.2 - v1"
      }
    },
    "YesNoSlotType": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexSlotType",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAYesNoSlotType-${AWS::StackName}"},
        "description": "QNA Yes No Slot Type - 4.7.2 - v1",
        "createVersion": true,
        "valueSelectionStrategy": "TOP_RESOLUTION",
        "enumerationValues": [
          {
            "value": "Yes",
            "synonyms": [
              "yes",
              "ok",
              "yeah",
              "sure",
              "yep",
              "affirmative",
              "aye",
              "correct",
              "1",
              "one"
            ]
          },
          {
            "value": "No",
            "synonyms": ["no", "nope", "na", "negative", "non", "2", "two"]
          }
        ]
      }
    },
    "YesNoIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAYesNoIntent-${AWS::StackName}"},
        "createVersion": true,
        "description": "QNA Yes No Intent - 4.7.2 - v1",
        "sampleUtterances": ["{Yes_No}", "I said {Yes_No}"],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "Yes_No",
            "slotType": {"Ref": "YesNoSlotType"},
            "slotTypeVersion": "QNABOT-AUTO-ASSIGNED",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "Say Yes or No."}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNAYesNo": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": ["YesNoSlotType", "YesNoIntent"],
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAYesNoBot-${AWS::StackName}"},
        "description": "QNA Yes No Bot - 4.7.2 - v1",
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "YesNoIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {
              "contentType": "PlainText",
              "content": "Please repeat - say Yes or No."
            }
          ],
          "maxAttempts": 5
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "YesNoAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNAYesNo",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAYesNo"},
        "name": "live",
        "description": "QNA Yes No Alias - 4.7.2 - v1"
      }
    },
    "YesNoExitSlotType": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexSlotType",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAYesNoExitSlotType-${AWS::StackName}"},
        "description": "QNA Yes No Exit Slot Type - 4.7.2 - v1",
        "createVersion": true,
        "valueSelectionStrategy": "TOP_RESOLUTION",
        "enumerationValues": [
          {
            "value": "Yes",
            "synonyms": [
              "yes",
              "ok",
              "yeah",
              "sure",
              "yep",
              "affirmative",
              "aye",
              "correct",
              "1",
              "one"
            ]
          },
          {
            "value": "No",
            "synonyms": ["no", "nope", "na", "negative", "non", "2", "two"]
          },
          {
            "value": "Exit",
            "synonyms": [
              "exit",
              "agent",
              "rep",
              "representative",
              "stop",
              "quit",
              "help",
              "bye",
              "goodbye",
              "3",
              "three"
            ]
          }
        ]
      }
    },
    "YesNoExitIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAYesNoExitIntent-${AWS::StackName}"},
        "createVersion": true,
        "description": "QNA Yes No Exit Intent - 4.7.2 - v1",
        "sampleUtterances": ["{Yes_No_Exit}", "I said {Yes_No_Exit}"],
        "conclusionStatement": {
          "messages": [{"content": "Ok. ", "contentType": "PlainText"}]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "Yes_No_Exit",
            "slotType": {"Ref": "YesNoExitSlotType"},
            "slotTypeVersion": "QNABOT-AUTO-ASSIGNED",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "Say Yes, No, or Exit."}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNAYesNoExit": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": ["YesNoExitSlotType", "YesNoExitIntent"],
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAYesNoExitBot-${AWS::StackName}"},
        "description": "QNA Yes No Exit Bot - 4.7.2 - v1",
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "YesNoExitIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {
              "contentType": "PlainText",
              "content": "Please repeat - say Yes or No. You can also say exit, agent, quit, or bye to leave."
            }
          ],
          "maxAttempts": 5
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "YesNoExitAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNAYesNoExit",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAYesNoExit"},
        "name": "live",
        "description": "QNA Yes No Exit Alias - 4.7.2 - v1"
      }
    },
    "DateIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNADateIntent-${AWS::StackName}"},
        "createVersion": true,
        "description": "QNA DateIntent - 4.7.2 - v1",
        "sampleUtterances": [
          "The date is {date}",
          "The date was {date}",
          "I went on {date}",
          "It is {date}",
          "It occurred on {date}",
          "I was born on {date}",
          "My birthdate is {date}",
          "My date of birth is {date}",
          "{date}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "Is {date} correct (Yes or No)?",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "Please let me know the date again?",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "date",
            "slotType": "AMAZON.DATE",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What date?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNADate": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "DateIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNADateBot-${AWS::StackName}"},
        "description": "QNA Date Bot - 4.7.2 - v1",
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "DateIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {"contentType": "PlainText", "content": "Please repeat the date."}
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "DateAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNADate",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNADate"},
        "name": "live",
        "description": "QNA Date Alias - 4.7.2 - v1"
      }
    },
    "DateIntentNoConfirm": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNADateIntentNoConfirm-${AWS::StackName}"},
        "createVersion": true,
        "description": "QNA DateIntentNoConfirm - 4.7.2 - v1",
        "sampleUtterances": [
          "The date is {date}",
          "The date was {date}",
          "I went on {date}",
          "It is {date}",
          "It occurred on {date}",
          "I was born on {date}",
          "My birthdate is {date}",
          "My date of birth is {date}",
          "{date}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "date",
            "slotType": "AMAZON.DATE",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What date?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNADateNoConfirm": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "DateIntentNoConfirm",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNADateBotNoConfirm-${AWS::StackName}"},
        "description": "QNA Date Bot No Confirm - 4.7.2 - v1",
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "DateIntentNoConfirm"}}],
        "clarificationPrompt": {
          "messages": [
            {"contentType": "PlainText", "content": "Please repeat the date."}
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "DateAliasNoConfirmV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNADateNoConfirm",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNADateNoConfirm"},
        "name": "live",
        "description": "QNA Date No Confirm Alias - 4.7.2 - v1"
      }
    },
    "DayOfWeekIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNADayOfWeekIntent-${AWS::StackName}"},
        "description": "QNA Day Of Week Intent - 4.7.2 - v1",
        "createVersion": true,
        "sampleUtterances": [
          "The day is {DayOfWeek}",
          "The day was {DayOfWeek}",
          "I went on {DayOfWeek}",
          "It is {DayOfWeek}",
          "It occurred on {DayOfWeek}",
          "{DayOfWeek}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "Is {DayOfWeek} correct (Yes or No)?",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "Please let me know the day again?",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "DayOfWeek",
            "slotType": "AMAZON.DayOfWeek",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What day?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNADayOfWeek": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "DayOfWeekIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNADayOfWeekBot-${AWS::StackName}"},
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "DayOfWeekIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {
              "contentType": "PlainText",
              "content": "Please repeat the day of the week."
            }
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        },
        "description": "QNADayOfWeek bot - 4.7.2 - v1"
      }
    },
    "DayOfWeekAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNADayOfWeek",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNADayOfWeek"},
        "name": "live",
        "description": "QNA Day Of Week Alias - 4.7.2 - v1"
      }
    },
    "MonthIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAMonthIntent-${AWS::StackName}"},
        "description": "QNA Month Intent - 4.7.2 - v1",
        "createVersion": true,
        "sampleUtterances": [
          "The month is {Month}",
          "The month was {Month}",
          "It is {Month}",
          "It occurred on {Month}",
          "{Month}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "Is {Month} correct (Yes or No)?",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "Please let me know the month again?",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "Month",
            "slotType": "AMAZON.Month",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What month?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNAMonth": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "MonthIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAMonthBot-${AWS::StackName}"},
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "MonthIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {"contentType": "PlainText", "content": "Please repeat the month."}
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        },
        "description": "QNA Month Bot - 4.7.2 - v1"
      }
    },
    "MonthAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNAMonth",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAMonth"},
        "name": "live",
        "description": "QNA Month Alias - 4.7.2 - v1"
      }
    },
    "MonthIntentNoConfirm": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAMonthIntentNoConfirm-${AWS::StackName}"},
        "description": "QNA Month Intent No Confirm - 4.7.2 - v1",
        "createVersion": true,
        "sampleUtterances": [
          "The month is {Month}",
          "The month was {Month}",
          "It is {Month}",
          "It occurred on {Month}",
          "{Month}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "Month",
            "slotType": "AMAZON.Month",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What month?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNAMonthNoConfirm": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "MonthIntentNoConfirm",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAMonthBotNoConfirm-${AWS::StackName}"},
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "MonthIntentNoConfirm"}}],
        "clarificationPrompt": {
          "messages": [
            {"contentType": "PlainText", "content": "Please repeat the month."}
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        },
        "description": "QNA Month Bot No Confirm - 4.7.2 - v1"
      }
    },
    "MonthAliasNoConfirmV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNAMonthNoConfirm",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAMonthNoConfirm"},
        "name": "live",
        "description": "QNA Month Alias No Confirm - 4.7.2 - v1"
      }
    },
    "NumberIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNANumberIntent-${AWS::StackName}"},
        "description": "QNA Number Intent - 4.7.2 - v1",
        "createVersion": true,
        "sampleUtterances": [
          "The number is {Number}",
          "The number was {Number}",
          "It is {Number}",
          "{Number}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "<speak>Is <say-as interpret-as=\"digits\">{Number}</say-as> correct (Yes or No)?</speak>",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "Please let me know the number again?",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "Number",
            "slotType": "AMAZON.NUMBER",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What number?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNANumber": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "NumberIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNANumberBot-${AWS::StackName}"},
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "NumberIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {"contentType": "PlainText", "content": "Please repeat the number."}
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        },
        "description": "QNA Number Bot - 4.7.2 - v1"
      }
    },
    "NumberAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNANumber",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNANumber"},
        "name": "live",
        "description": "QNA Number Alias - 4.7.2 - v1"
      }
    },
    "NumberIntentNoConfirm": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNANumberIntentNoConfirm-${AWS::StackName}"},
        "description": "QNA Number Intent No Confirm - 4.7.2 - v1",
        "createVersion": true,
        "sampleUtterances": [
          "The number is {Number}",
          "The number was {Number}",
          "It is {Number}",
          "{Number}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "Number",
            "slotType": "AMAZON.NUMBER",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What number?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNANumberNoConfirm": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "NumberIntentNoConfirm",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNANumberBotNoConfirm-${AWS::StackName}"},
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "NumberIntentNoConfirm"}}],
        "clarificationPrompt": {
          "messages": [
            {"contentType": "PlainText", "content": "Please repeat the number."}
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        },
        "description": "QNA Number Bot No Confirm - 4.7.2 - v1"
      }
    },
    "NumberAliasNoConfirmV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNANumberNoConfirm",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNANumberNoConfirm"},
        "name": "live",
        "description": "QNA Number Alias No Confirm - 4.7.2 - v1"
      }
    },
    "AgeIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAAgeIntent-${AWS::StackName}"},
        "description": "QNA Age Intent - 4.7.2 - v1",
        "createVersion": true,
        "sampleUtterances": [
          "My age is {Age}",
          "Age is {Age}",
          "It is {Age}",
          "I am {Age}",
          "I am {Age} years old",
          "His age is {Age}",
          "He is {Age}",
          "He is {Age} years old",
          "Her age is {Age}",
          "She is {Age}",
          "She is {Age} years old",
          "{Age}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "Is {Age} correct (Yes or No)?",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "Please let me know the age again?",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "Age",
            "slotType": "AMAZON.NUMBER",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What age?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNAAge": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "AgeIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAAgeBot-${AWS::StackName}"},
        "description": "QNA Age Bot - 4.7.2 - v1",
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "AgeIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {"contentType": "PlainText", "content": "Please repeat the age."}
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "AgeAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNAAge",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAAge"},
        "name": "live",
        "description": "QNA Age Alias - 4.7.2 - v1"
      }
    },
    "PhoneNumberIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAPhoneNumberIntent-${AWS::StackName}"},
        "description": "QNA Phone Number Intent - 4.7.2 - v1",
        "createVersion": true,
        "sampleUtterances": [
          "The phone number is {PhoneNumber}",
          "My phone number is {PhoneNumber}",
          "It is {PhoneNumber}",
          "{PhoneNumber}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "<speak>Is <say-as interpret-as=\"telephone\">{PhoneNumber}</say-as> correct (Yes or No)?</speak>",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "Please let me know the phone number again?",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "PhoneNumber",
            "slotType": "AMAZON.PhoneNumber",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What phone number?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNAPhoneNumber": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "PhoneNumberIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAPhoneNumberBot-${AWS::StackName}"},
        "description": "QNA Phone Number Bot - 4.7.2 - v1",
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "PhoneNumberIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {
              "contentType": "PlainText",
              "content": "Please repeat the phone number."
            }
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "PhoneNumberAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNAPhoneNumber",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAPhoneNumber"},
        "name": "live",
        "description": "QNA Phone Number Alias - 4.7.2 - v1"
      }
    },
    "PhoneNumberIntentNoConfirm": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAPhoneNumberIntentNoConfirm-${AWS::StackName}"},
        "description": "QNA Phone Number Intent No Confirm - 4.7.2 - v1",
        "createVersion": true,
        "sampleUtterances": [
          "The phone number is {PhoneNumber}",
          "My phone number is {PhoneNumber}",
          "It is {PhoneNumber}",
          "{PhoneNumber}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "PhoneNumber",
            "slotType": "AMAZON.PhoneNumber",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What phone number?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNAPhoneNumberNoConfirm": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "PhoneNumberIntentNoConfirm",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAPhoneNumberBotNoConfirm-${AWS::StackName}"},
        "description": "QNA Phone Number Bot No Confirm - 4.7.2 - v1",
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "PhoneNumberIntentNoConfirm"}}],
        "clarificationPrompt": {
          "messages": [
            {
              "contentType": "PlainText",
              "content": "Please repeat the phone number."
            }
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "PhoneNumberAliasNoConfirmV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNAPhoneNumberNoConfirm",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAPhoneNumberNoConfirm"},
        "name": "live",
        "description": "QNA Phone Number Alias No Confirm - 4.7.2 - v1"
      }
    },
    "TimeIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNATimeIntent-${AWS::StackName}"},
        "description": "QNA Time Intent - 4.7.2 - v1",
        "createVersion": true,
        "sampleUtterances": [
          "The time was {Time}",
          "It occurred at {Time}",
          "At {Time}",
          "{Time}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "Is {Time} correct (Yes or No)?",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "Please let me know the time again?",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "Time",
            "slotType": "AMAZON.TIME",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What time?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNATime": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "TimeIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNATimeBot-${AWS::StackName}"},
        "description": "QNA Time Bot - 4.7.2 - v1",
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "TimeIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {
              "contentType": "PlainText",
              "content": "Please repeat the time, specifying am or pm."
            }
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "TimeAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNATime",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNATime"},
        "name": "live",
        "description": "QNA Time Alias - 4.7.2 - v1"
      }
    },
    "EmailAddressIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAEmailAddressIntent-${AWS::StackName}"},
        "description": "QNA Email Address Intent - 4.7.2 - v1",
        "createVersion": true,
        "sampleUtterances": [
          "My email address is {EmailAddress}",
          "The email address is {EmailAddress}",
          "{EmailAddress}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "Is {EmailAddress} correct (Yes or No)?",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "Please let me know the email address again?",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "EmailAddress",
            "slotType": "AMAZON.EmailAddress",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {"contentType": "PlainText", "content": "What email address?"}
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNAEmailAddress": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "EmailAddressIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNAEmailAddressBot-${AWS::StackName}"},
        "description": "QNA Email Address Intent - 4.7.2 - v1",
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "EmailAddressIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {
              "contentType": "PlainText",
              "content": "Please repeat the email address."
            }
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "EmailAddressAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNAEmailAddress",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAEmailAddress"},
        "name": "live",
        "description": "QNA Email Address Alias - 4.7.2 - v1"
      }
    },
    "NameIntent": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNANameIntent-${AWS::StackName}"},
        "description": "Parse name responses.",
        "createVersion": true,
        "sampleUtterances": [
          "My last name is {LastName}",
          "My first name is {FirstName}",
          "My first name is {FirstName} and My last name is {LastName}",
          "My name is {FirstName} {LastName}",
          "I am {FirstName} {LastName}",
          "{FirstName} {LastName}",
          "{FirstName}",
          "{LastName}"
        ],
        "conclusionStatement": {
          "messages": [{"content": "OK. ", "contentType": "PlainText"}]
        },
        "confirmationPrompt": {
          "maxAttempts": 1,
          "messages": [
            {
              "content": "Did I get your name right (Yes or No) {FirstName} {LastName}?",
              "contentType": "PlainText"
            }
          ]
        },
        "rejectionStatement": {
          "messages": [
            {
              "content": "Please let me know your name again?",
              "contentType": "PlainText"
            }
          ]
        },
        "fulfillmentActivity": {"type": "ReturnIntent"},
        "slots": [
          {
            "name": "FirstName",
            "slotType": "AMAZON.US_FIRST_NAME",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {
                  "contentType": "PlainText",
                  "content": "What is your first name?"
                }
              ],
              "maxAttempts": 2
            },
            "priority": 1
          },
          {
            "name": "LastName",
            "slotType": "AMAZON.US_LAST_NAME",
            "slotConstraint": "Required",
            "valueElicitationPrompt": {
              "messages": [
                {
                  "contentType": "PlainText",
                  "content": "What is your last name?"
                }
              ],
              "maxAttempts": 2
            },
            "priority": 1
          }
        ]
      }
    },
    "QNAName": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexBot",
      "DependsOn": "NameIntent",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "name": {"Fn::Sub": "QNANameBot-${AWS::StackName}"},
        "description": "QNA Name Bot - 4.7.2 - v1",
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [{"intentName": {"Ref": "NameIntent"}}],
        "clarificationPrompt": {
          "messages": [
            {
              "contentType": "PlainText",
              "content": "Please repeat your first and last name?"
            }
          ],
          "maxAttempts": 3
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I could not understand. Please start again.",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "NameAliasV2": {
      "Condition": "CreateLexV1Bots",
      "Type": "Custom::LexAlias",
      "DependsOn": "QNAName",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "botName": {"Ref": "QNAName"},
        "name": "live",
        "description": "QNA Name Alias - 4.7.2 - v1"
      }
    },
    "ResponseBotQNAWage": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNAWage-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Wage Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.slotTypes": [
              {
                "slotTypeName": "QNAWageSlotType",
                "valueSelectionSetting": {
                  "resolutionStrategy": "OriginalValue",
                  "regexFilter": {"pattern": "[0-9]{1,7}"}
                },
                "parentSlotTypeSignature": "AMAZON.AlphaNumeric"
              }
            ],
            "CR.intents": [
              {
                "intentName": "WageIntent",
                "sampleUtterances": [
                  {"utterance": "My salary is {Wage}"},
                  {"utterance": "My wage is {Wage}"},
                  {"utterance": "{Wage}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Is {Wage} correct (Yes/No)?"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Please let me what your wage was again?"
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "Wage",
                    "CR.slotTypeName": "QNAWageSlotType",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {
                                "value": "What is your wage?"
                              }
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNAWageVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAWage"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAWage", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNAWage", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNAWageAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAWage"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNAWageVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNASocialSecurity": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {
          "Fn::Sub": "ResponseBot-QNASocialSecurity-${AWS::StackName}"
        },
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA SocialSecurity Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.slotTypes": [
              {
                "slotTypeName": "QNASocialSecuritySlotType",
                "valueSelectionSetting": {
                  "resolutionStrategy": "OriginalValue",
                  "regexFilter": {"pattern": "[0-9]{3}-[0-9]{2}-[0-9]{4}"}
                },
                "parentSlotTypeSignature": "AMAZON.AlphaNumeric"
              }
            ],
            "CR.intents": [
              {
                "intentName": "SocialSecurityIntent",
                "sampleUtterances": [
                  {"utterance": "The social security number is {SSN}"},
                  {"utterance": "My social security number is {SSN}"},
                  {"utterance": "It is {SSN}"},
                  {"utterance": "{SSN}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Is {SSN} correct (Yes/No)?"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Please let me know the social security number again?"
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "SSN",
                    "CR.slotTypeName": "QNASocialSecuritySlotType",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {
                                "value": "What is your social security number?"
                              }
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNASocialSecurityVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNASocialSecurity"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNASocialSecurity", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNASocialSecurity", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNASocialSecurityAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNASocialSecurity"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNASocialSecurityVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNAPin": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNAPin-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA PIN Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.slotTypes": [
              {
                "slotTypeName": "QNAPinSlotType",
                "valueSelectionSetting": {
                  "resolutionStrategy": "OriginalValue",
                  "regexFilter": {"pattern": "[0-9]{4}"}
                },
                "parentSlotTypeSignature": "AMAZON.AlphaNumeric"
              }
            ],
            "CR.intents": [
              {
                "intentName": "PINIntent",
                "sampleUtterances": [
                  {"utterance": "The pin number is {Pin}"},
                  {"utterance": "My pin number is {Pin}"},
                  {"utterance": "It is {Pin}"},
                  {"utterance": "{Pin}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "<speak>Is <say-as interpret-as=\"digits\">{Pin}</say-as> correct (Yes or No)?"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "I'm sorry I did not get all the digits, please re-enter all digits."
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "Pin",
                    "CR.slotTypeName": "QNAPinSlotType",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {
                                "value": "What are all the digits?"
                              }
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNAPinVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAPin"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAPin", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNAPin", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNAPinAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAPin"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNAPinVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNAPinNoConfirm": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNAPinNoConfirm-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA PIN Bot (NoConfirm) - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.slotTypes": [
              {
                "slotTypeName": "QNAPinNoConfirmSlotType",
                "valueSelectionSetting": {
                  "resolutionStrategy": "OriginalValue",
                  "regexFilter": {"pattern": "[0-9]{4}"}
                },
                "parentSlotTypeSignature": "AMAZON.AlphaNumeric"
              }
            ],
            "CR.intents": [
              {
                "intentName": "PINNoConfirmIntent",
                "sampleUtterances": [
                  {"utterance": "The pin number is {Pin}"},
                  {"utterance": "My pin number is {Pin}"},
                  {"utterance": "It is {Pin}"},
                  {"utterance": "{Pin}"}
                ],
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "Pin",
                    "CR.slotTypeName": "QNAPinNoConfirmSlotType",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {
                                "value": "What are all the digits?"
                              }
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNAPinNoConfirmVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAPinNoConfirm"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAPinNoConfirm", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNAPinNoConfirm", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNAPinNoConfirmAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAPinNoConfirm"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNAPinNoConfirmVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNAYesNo": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNAYesNo-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Yes No Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.slotTypes": [
              {
                "slotTypeName": "QNAYesNoSlotType",
                "slotTypeValues": [
                  {
                    "sampleValue": {"value": "Yes"},
                    "synonyms": [
                      {"value": "Yes"},
                      {"value": "OK"},
                      {"value": "yeah"},
                      {"value": "sure"},
                      {"value": "yep"},
                      {"value": "affirmative"},
                      {"value": "aye"},
                      {"value": "correct"},
                      {"value": "one"},
                      {"value": "1"}
                    ]
                  },
                  {
                    "sampleValue": {"value": "No"},
                    "synonyms": [
                      {"value": "no"},
                      {"value": "nope"},
                      {"value": "na"},
                      {"value": "negative"},
                      {"value": "non"},
                      {"value": "incorrect"},
                      {"value": "Two"},
                      {"value": "2"}
                    ]
                  }
                ],
                "valueSelectionSetting": {"resolutionStrategy": "TopResolution"}
              }
            ],
            "CR.intents": [
              {
                "intentName": "YesNoIntent",
                "sampleUtterances": [
                  {"utterance": "{Yes_No}"},
                  {"utterance": "I said {Yes_No}"}
                ],
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "Yes_No",
                    "CR.slotTypeName": "QNAYesNoSlotType",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {"value": "Say Yes or No."}
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNAYesNoVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAYesNo"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAYesNo", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNAYesNo", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNAYesNoAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAYesNo"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNAYesNoVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNAYesNoExit": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNAYesNoExit-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Yes No Exit Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.slotTypes": [
              {
                "slotTypeName": "QNAYesNoExitSlotType",
                "slotTypeValues": [
                  {
                    "sampleValue": {"value": "Yes"},
                    "synonyms": [
                      {"value": "Yes"},
                      {"value": "OK"},
                      {"value": "yeah"},
                      {"value": "sure"},
                      {"value": "yep"},
                      {"value": "affirmative"},
                      {"value": "aye"},
                      {"value": "correct"},
                      {"value": "one"},
                      {"value": "1"}
                    ]
                  },
                  {
                    "sampleValue": {"value": "No"},
                    "synonyms": [
                      {"value": "no"},
                      {"value": "nope"},
                      {"value": "na"},
                      {"value": "negative"},
                      {"value": "non"},
                      {"value": "incorrect"},
                      {"value": "Two"},
                      {"value": "2"}
                    ]
                  },
                  {
                    "sampleValue": {"value": "Exit"},
                    "synonyms": [
                      {"value": "agent"},
                      {"value": "rep"},
                      {"value": "representative"},
                      {"value": "stop"},
                      {"value": "quit"},
                      {"value": "help"},
                      {"value": "bye"},
                      {"value": "goodbye"},
                      {"value": "three"},
                      {"value": "3"}
                    ]
                  }
                ],
                "valueSelectionSetting": {"resolutionStrategy": "TopResolution"}
              }
            ],
            "CR.intents": [
              {
                "intentName": "YesNoExitIntent",
                "sampleUtterances": [
                  {"utterance": "{Yes_No_Exit}"},
                  {"utterance": "I said {Yes_No_Exit}"}
                ],
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "Yes_No_Exit",
                    "CR.slotTypeName": "QNAYesNoExitSlotType",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {
                                "value": "Say Yes, No, or Exit."
                              }
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNAYesNoExitVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAYesNoExit"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAYesNoExit", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNAYesNoExit", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNAYesNoExitAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAYesNoExit"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNAYesNoExitVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNADate": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNADate-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Date Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.intents": [
              {
                "intentName": "DateIntent",
                "sampleUtterances": [
                  {"utterance": "The date is {date}"},
                  {"utterance": "The date was {date}"},
                  {"utterance": "I went on {date}"},
                  {"utterance": "It is {date}"},
                  {"utterance": "It occurred on {date}"},
                  {"utterance": "I was born on {date}"},
                  {"utterance": "My birthdate is {date}"},
                  {"utterance": "My date of birth is {date}"},
                  {"utterance": "{date}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Is {date} correct (Yes or No)?"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Please let me know the date again?"
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "date",
                    "CR.slotTypeName": "AMAZON.Date",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {"value": "What date?"}
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNADateVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNADate"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNADate", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNADate", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNADateAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNADate"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNADateVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNADateNoConfirm": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {
          "Fn::Sub": "ResponseBot-QNADateNoConfirm-${AWS::StackName}"
        },
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Date Bot (NoConfirm) - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.intents": [
              {
                "intentName": "DateNoConfirmIntent",
                "sampleUtterances": [
                  {"utterance": "The date is {date}"},
                  {"utterance": "The date was {date}"},
                  {"utterance": "I went on {date}"},
                  {"utterance": "It is {date}"},
                  {"utterance": "It occurred on {date}"},
                  {"utterance": "I was born on {date}"},
                  {"utterance": "My birthdate is {date}"},
                  {"utterance": "My date of birth is {date}"},
                  {"utterance": "{date}"}
                ],
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "date",
                    "CR.slotTypeName": "AMAZON.Date",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {"value": "What date?"}
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNADateNoConfirmVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNADateNoConfirm"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNADateNoConfirm", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNADateNoConfirm", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNADateNoConfirmAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNADateNoConfirm"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNADateNoConfirmVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNADayOfWeek": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNADayOfWeek-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA DayOfWeek Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.slotTypes": [
              {
                "slotTypeName": "QNADayOfWeekSlotType",
                "slotTypeValues": [
                  {
                    "sampleValue": {"value": "Sunday"},
                    "synonyms": [{"value": "Su"}, {"value": "Sun"}]
                  },
                  {
                    "sampleValue": {"value": "Monday"},
                    "synonyms": [
                      {"value": "M"},
                      {"value": "Mo"},
                      {"value": "Mon"}
                    ]
                  },
                  {
                    "sampleValue": {"value": "Tuesday"},
                    "synonyms": [
                      {"value": "Tu"},
                      {"value": "Tue"},
                      {"value": "Tues"}
                    ]
                  },
                  {
                    "sampleValue": {"value": "Wednesday"},
                    "synonyms": [
                      {"value": "W"},
                      {"value": "We"},
                      {"value": "Wed"}
                    ]
                  },
                  {
                    "sampleValue": {"value": "Thursday"},
                    "synonyms": [
                      {"value": "Th"},
                      {"value": "Thu"},
                      {"value": "Thurs"}
                    ]
                  },
                  {
                    "sampleValue": {"value": "Friday"},
                    "synonyms": [
                      {"value": "F"},
                      {"value": "Fr"},
                      {"value": "Fri"}
                    ]
                  },
                  {
                    "sampleValue": {"value": "Saturday"},
                    "synonyms": [{"value": "Sa"}, {"value": "Sat"}]
                  }
                ],
                "valueSelectionSetting": {"resolutionStrategy": "TopResolution"}
              }
            ],
            "CR.intents": [
              {
                "intentName": "DayOfWeekIntent",
                "sampleUtterances": [
                  {"utterance": "The day is {DayOfWeek}"},
                  {"utterance": "The day was {DayOfWeek}"},
                  {"utterance": "I went on {DayOfWeek}"},
                  {"utterance": "It is {DayOfWeek}"},
                  {"utterance": "It occurred on {DayOfWeek}"},
                  {"utterance": "{DayOfWeek}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Is {DayOfWeek} correct (Yes or No)?"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Please let me know the day of the week again?"
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "DayOfWeek",
                    "CR.slotTypeName": "QNADayOfWeekSlotType",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {
                                "value": "What day of the week?"
                              }
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNADayOfWeekVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNADayOfWeek"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNADayOfWeek", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNADayOfWeek", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNADayOfWeekAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNADayOfWeek"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNADayOfWeekVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNAMonth": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNAMonth-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Month Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.slotTypes": [
              {
                "slotTypeName": "QNAMonthSlotType",
                "slotTypeValues": [
                  {
                    "sampleValue": {"value": "January"},
                    "synonyms": [{"value": "Jan"}, {"value": "01"}]
                  },
                  {
                    "sampleValue": {"value": "February"},
                    "synonyms": [{"value": "Feb"}, {"value": "02"}]
                  },
                  {
                    "sampleValue": {"value": "March"},
                    "synonyms": [{"value": "Mar"}, {"value": "03"}]
                  },
                  {
                    "sampleValue": {"value": "April"},
                    "synonyms": [{"value": "Apr"}, {"value": "04"}]
                  },
                  {
                    "sampleValue": {"value": "May"},
                    "synonyms": [{"value": "05"}]
                  },
                  {
                    "sampleValue": {"value": "June"},
                    "synonyms": [{"value": "Jun"}, {"value": "06"}]
                  },
                  {
                    "sampleValue": {"value": "July"},
                    "synonyms": [{"value": "Jul"}, {"value": "07"}]
                  },
                  {
                    "sampleValue": {"value": "August"},
                    "synonyms": [{"value": "Aug"}, {"value": "08"}]
                  },
                  {
                    "sampleValue": {"value": "September"},
                    "synonyms": [
                      {"value": "Sep"},
                      {"value": "Sept"},
                      {"value": "09"}
                    ]
                  },
                  {
                    "sampleValue": {"value": "October"},
                    "synonyms": [{"value": "Oct"}, {"value": "10"}]
                  },
                  {
                    "sampleValue": {"value": "November"},
                    "synonyms": [{"value": "Nov"}, {"value": "11"}]
                  },
                  {
                    "sampleValue": {"value": "December"},
                    "synonyms": [{"value": "Dec"}, {"value": "12"}]
                  }
                ],
                "valueSelectionSetting": {"resolutionStrategy": "TopResolution"}
              }
            ],
            "CR.intents": [
              {
                "intentName": "MonthIntent",
                "sampleUtterances": [
                  {"utterance": "The month is {Month}"},
                  {"utterance": "The day was {Month}"},
                  {"utterance": "It is {Month}"},
                  {"utterance": "It occurred on {Month}"},
                  {"utterance": "{Month}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Is {Month} correct (Yes or No)?"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Please let me know the month again?"
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "Month",
                    "CR.slotTypeName": "QNAMonthSlotType",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {"value": "What month?"}
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNAMonthVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAMonth"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAMonth", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNAMonth", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNAMonthAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAMonth"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNAMonthVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNAMonthNoConfirm": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {
          "Fn::Sub": "ResponseBot-QNAMonthNoConfirm-${AWS::StackName}"
        },
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Month Bot (NoConfirm) - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.slotTypes": [
              {
                "slotTypeName": "QNAMonthNoConfirmSlotType",
                "slotTypeValues": [
                  {
                    "sampleValue": {"value": "January"},
                    "synonyms": [{"value": "Jan"}, {"value": "01"}]
                  },
                  {
                    "sampleValue": {"value": "February"},
                    "synonyms": [{"value": "Feb"}, {"value": "02"}]
                  },
                  {
                    "sampleValue": {"value": "March"},
                    "synonyms": [{"value": "Mar"}, {"value": "03"}]
                  },
                  {
                    "sampleValue": {"value": "April"},
                    "synonyms": [{"value": "Apr"}, {"value": "04"}]
                  },
                  {
                    "sampleValue": {"value": "May"},
                    "synonyms": [{"value": "05"}]
                  },
                  {
                    "sampleValue": {"value": "June"},
                    "synonyms": [{"value": "Jun"}, {"value": "06"}]
                  },
                  {
                    "sampleValue": {"value": "July"},
                    "synonyms": [{"value": "Jul"}, {"value": "07"}]
                  },
                  {
                    "sampleValue": {"value": "August"},
                    "synonyms": [{"value": "Aug"}, {"value": "08"}]
                  },
                  {
                    "sampleValue": {"value": "September"},
                    "synonyms": [
                      {"value": "Sep"},
                      {"value": "Sept"},
                      {"value": "09"}
                    ]
                  },
                  {
                    "sampleValue": {"value": "October"},
                    "synonyms": [{"value": "Oct"}, {"value": "10"}]
                  },
                  {
                    "sampleValue": {"value": "November"},
                    "synonyms": [{"value": "Nov"}, {"value": "11"}]
                  },
                  {
                    "sampleValue": {"value": "December"},
                    "synonyms": [{"value": "Dec"}, {"value": "12"}]
                  }
                ],
                "valueSelectionSetting": {"resolutionStrategy": "TopResolution"}
              }
            ],
            "CR.intents": [
              {
                "intentName": "MonthNoConfirmIntent",
                "sampleUtterances": [
                  {"utterance": "The month is {Month}"},
                  {"utterance": "The day was {Month}"},
                  {"utterance": "It is {Month}"},
                  {"utterance": "It occurred on {Month}"},
                  {"utterance": "{Month}"}
                ],
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "Month",
                    "CR.slotTypeName": "QNAMonthNoConfirmSlotType",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {"value": "What month?"}
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNAMonthNoConfirmVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAMonthNoConfirm"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAMonthNoConfirm", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNAMonthNoConfirm", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNAMonthNoConfirmAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAMonthNoConfirm"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNAMonthNoConfirmVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNANumber": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNANumber-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Number Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.intents": [
              {
                "intentName": "NumberIntent",
                "sampleUtterances": [
                  {"utterance": "The number is {Number}"},
                  {"utterance": "The number was {Number}"},
                  {"utterance": "It is {Number}"},
                  {"utterance": "{Number}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "<speak>Is <say-as interpret-as=\"digits\">{Number}</say-as> correct (Yes or No)?</speak>"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Please let me know the number again?"
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "Number",
                    "CR.slotTypeName": "AMAZON.Number",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {"value": "What  number?"}
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNANumberVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNANumber"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNANumber", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNANumber", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNANumberAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNANumber"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNANumberVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNANumberNoConfirm": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {
          "Fn::Sub": "ResponseBot-QNANumberNoConfirm-${AWS::StackName}"
        },
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Number Bot (NoConfirm) - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.intents": [
              {
                "intentName": "NumberNoConfirmIntent",
                "sampleUtterances": [
                  {"utterance": "The number is {Number}"},
                  {"utterance": "The number was {Number}"},
                  {"utterance": "It is {Number}"},
                  {"utterance": "{Number}"}
                ],
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "Number",
                    "CR.slotTypeName": "AMAZON.Number",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {"value": "What number?"}
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNANumberNoConfirmVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNANumberNoConfirm"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNANumberNoConfirm", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNANumberNoConfirm", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNANumberNoConfirmAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNANumberNoConfirm"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNANumberNoConfirmVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNAAge": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNAAge-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Age Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.intents": [
              {
                "intentName": "AgeIntent",
                "sampleUtterances": [
                  {"utterance": "My age is {Age}"},
                  {"utterance": "Age is {Age}"},
                  {"utterance": "It is {Age}"},
                  {"utterance": "I am {Age}"},
                  {"utterance": "I am {Age} years old"},
                  {"utterance": "His age is {Age}"},
                  {"utterance": "He is {Age}"},
                  {"utterance": "He is {Age} years old"},
                  {"utterance": "Her age is {Age}"},
                  {"utterance": "She is {Age}"},
                  {"utterance": "She is {Age} years old"},
                  {"utterance": "{Age}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Is {Age} correct (Yes or No)?"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Please let me know the age again?"
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "Age",
                    "CR.slotTypeName": "AMAZON.Number",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {"value": "What age?"}
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNAAgeVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAAge"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAAge", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNAAge", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNAAgeAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAAge"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNAAgeVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNAPhoneNumber": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNAPhoneNumber-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Phone Number Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.intents": [
              {
                "intentName": "PhoneNumberIntent",
                "sampleUtterances": [
                  {"utterance": "The phone number is {PhoneNumber}"},
                  {"utterance": "My phone number is {PhoneNumber}"},
                  {"utterance": "It is {PhoneNumber}"},
                  {"utterance": "{PhoneNumber}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "<speak>Is <say-as interpret-as=\"telephone\">{PhoneNumber}</say-as> correct (Yes or No)?</speak>"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Please let me know the phone number again?"
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "PhoneNumber",
                    "CR.slotTypeName": "AMAZON.PhoneNumber",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {
                                "value": "What phone number?"
                              }
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNAPhoneNumberVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAPhoneNumber"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAPhoneNumber", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNAPhoneNumber", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNAPhoneNumberAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAPhoneNumber"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNAPhoneNumberVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNAPhoneNumberNoConfirm": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {
          "Fn::Sub": "ResponseBot-QNAPhoneNumberNoConfirm-${AWS::StackName}"
        },
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Phone Number Bot (NoConfirm) - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.intents": [
              {
                "intentName": "NumberNoConfirmIntent",
                "sampleUtterances": [
                  {"utterance": "The phone number is {PhoneNumber}"},
                  {"utterance": "My phone number is {PhoneNumber}"},
                  {"utterance": "It is {PhoneNumber}"},
                  {"utterance": "{PhoneNumber}"}
                ],
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "PhoneNumber",
                    "CR.slotTypeName": "AMAZON.PhoneNumber",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {
                                "value": "What phone number?"
                              }
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNAPhoneNumberNoConfirmVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAPhoneNumberNoConfirm"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAPhoneNumberNoConfirm", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": [
            "ResponseBotQNAPhoneNumberNoConfirm",
            "lastUpdatedDateTime"
          ]
        }
      }
    },
    "ResponseBotQNAPhoneNumberNoConfirmAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAPhoneNumberNoConfirm"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNAPhoneNumberNoConfirmVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNATime": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNATime-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Time Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.intents": [
              {
                "intentName": "TimeIntent",
                "sampleUtterances": [
                  {"utterance": "The time was {Time}"},
                  {"utterance": "The time is {Time}"},
                  {"utterance": "It occurred at {Time}"},
                  {"utterance": "At {Time}"},
                  {"utterance": "{Time}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Is {Time} correct (Yes or No)?"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Please let me know the time again?"
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "Time",
                    "CR.slotTypeName": "AMAZON.Time",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {"value": "What time?"}
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNATimeVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNATime"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNATime", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNATime", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNATimeAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNATime"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNATimeVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNAEmailAddress": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNAEmailAddress-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Email Address Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.intents": [
              {
                "intentName": "EmailAddressIntent",
                "sampleUtterances": [
                  {"utterance": "My email address is {EmailAddress}"},
                  {"utterance": "The email address is {EmailAddress}"},
                  {"utterance": "{EmailAddress}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Is {EmailAddress} correct (Yes or No)?"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Please let me know the email address again?"
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "EmailAddress",
                    "CR.slotTypeName": "AMAZON.EmailAddress",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {
                                "value": "What email address?"
                              }
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNAEmailAddressVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAEmailAddress"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAEmailAddress", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNAEmailAddress", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNAEmailAddressAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAEmailAddress"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNAEmailAddressVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ResponseBotQNAName": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botName": {"Fn::Sub": "ResponseBot-QNAName-${AWS::StackName}"},
        "dataPrivacy": {"childDirected": "False"},
        "description": "QNA Name Bot - 4.7.2 - v1",
        "idleSessionTTLInSeconds": "300",
        "roleArn": {"Ref": "LexV2ServiceLinkedRoleARN"},
        "CR.botLocales": [
          {
            "localeId": "en_US",
            "nluIntentConfidenceThreshold": "0.40",
            "voiceSettings": {"voiceId": "Salli"},
            "CR.intents": [
              {
                "intentName": "NameIntent",
                "sampleUtterances": [
                  {"utterance": "My last name is {LastName}"},
                  {"utterance": "My first name is {FirstName}"},
                  {
                    "utterance": "My first name is {FirstName} and My last name is {LastName}"
                  },
                  {"utterance": "My name is {FirstName} {LastName}"},
                  {"utterance": "I am {FirstName} {LastName}"},
                  {"utterance": "{FirstName} {LastName}"},
                  {"utterance": "{FirstName}"},
                  {"utterance": "{LastName}"}
                ],
                "intentConfirmationSetting": {
                  "promptSpecification": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Did I get your name right (Yes or No) {FirstName} {LastName}?"
                          }
                        }
                      }
                    ],
                    "maxRetries": 1
                  },
                  "declinationResponse": {
                    "messageGroups": [
                      {
                        "message": {
                          "plainTextMessage": {
                            "value": "Please let me know your name again?"
                          }
                        }
                      }
                    ]
                  }
                },
                "intentClosingSetting": {
                  "closingResponse": {
                    "messageGroups": [
                      {"message": {"plainTextMessage": {"value": "OK. "}}}
                    ]
                  }
                },
                "CR.slots": [
                  {
                    "slotName": "FirstName",
                    "CR.slotTypeName": "AMAZON.FirstName",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {
                                "value": "What is your first name?"
                              }
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  },
                  {
                    "slotName": "LastName",
                    "CR.slotTypeName": "AMAZON.LastName",
                    "valueElicitationSetting": {
                      "slotConstraint": "Required",
                      "promptSpecification": {
                        "messageGroups": [
                          {
                            "message": {
                              "plainTextMessage": {
                                "value": "What is your last name?"
                              }
                            }
                          }
                        ],
                        "maxRetries": 2,
                        "allowInterrupt": "True"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ResponseBotQNANameVersion": {
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Type": "Custom::LexBotVersion",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAName"},
        "CR.botLocaleIds": {
          "Fn::GetAtt": ["ResponseBotQNAName", "botLocaleIds"]
        },
        "CR.lastUpdatedDateTime": {
          "Fn::GetAtt": ["ResponseBotQNAName", "lastUpdatedDateTime"]
        }
      }
    },
    "ResponseBotQNANameAlias": {
      "DeletionPolicy": "Retain",
      "Type": "Custom::LexBotAlias",
      "Properties": {
        "ServiceToken": {"Ref": "LexV2CFNLambdaARN"},
        "botId": {"Ref": "ResponseBotQNAName"},
        "botAliasName": "live",
        "botVersion": {"Ref": "ResponseBotQNANameVersion"},
        "botAliasLocaleSettings": {"en_US": {"enabled": "True"}}
      }
    },
    "ExampleJSLambdaQuiz": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/examples.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "ExampleCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Ref": "Index"},
            "FIREHOSE_NAME": {"Ref": "FeedbackFirehoseName"},
            "ES_ADDRESS": {"Ref": "ESAddress"},
            "QUIZ_KMS_KEY": {"Ref": "QuizKey"},
            "CFSTACK": {"Ref": "AWS::StackName"}
          }
        },
        "Handler": "js/Quiz.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["ExampleLambdaRole", "Arn"]},
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "Example"}]
      }
    },
    "ExampleJSLambdahook": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/examples.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "ExampleCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Ref": "Index"},
            "FIREHOSE_NAME": {"Ref": "FeedbackFirehoseName"},
            "ES_ADDRESS": {"Ref": "ESAddress"},
            "QUIZ_KMS_KEY": {"Ref": "QuizKey"},
            "CFSTACK": {"Ref": "AWS::StackName"}
          }
        },
        "Handler": "js/hook.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["ExampleLambdaRole", "Arn"]},
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "Example"}]
      }
    },
    "ExamplePYTHONLambdaBotBroker": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/examples.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "ExampleCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Ref": "Index"},
            "FIREHOSE_NAME": {"Ref": "FeedbackFirehoseName"},
            "ES_ADDRESS": {"Ref": "ESAddress"},
            "QUIZ_KMS_KEY": {"Ref": "QuizKey"},
            "SNS_TOPIC_ARN": {"Ref": "FeedbackSNS"},
            "CFSTACK": {"Ref": "AWS::StackName"}
          }
        },
        "Handler": "py/BotBroker.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["ExampleLambdaRole", "Arn"]},
        "Runtime": "python3.6",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "Example"}]
      }
    },
    "ExamplePYTHONLambdaConnectCallback": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/examples.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "ExampleCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Ref": "Index"},
            "FIREHOSE_NAME": {"Ref": "FeedbackFirehoseName"},
            "ES_ADDRESS": {"Ref": "ESAddress"},
            "QUIZ_KMS_KEY": {"Ref": "QuizKey"},
            "SNS_TOPIC_ARN": {"Ref": "FeedbackSNS"},
            "CFSTACK": {"Ref": "AWS::StackName"}
          }
        },
        "Handler": "py/ConnectCallback.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["ExampleLambdaRole", "Arn"]},
        "Runtime": "python3.6",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "Example"}]
      }
    },
    "ExamplePYTHONLambdaFeedback": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/examples.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "ExampleCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Ref": "Index"},
            "FIREHOSE_NAME": {"Ref": "FeedbackFirehoseName"},
            "ES_ADDRESS": {"Ref": "ESAddress"},
            "QUIZ_KMS_KEY": {"Ref": "QuizKey"},
            "SNS_TOPIC_ARN": {"Ref": "FeedbackSNS"},
            "CFSTACK": {"Ref": "AWS::StackName"}
          }
        },
        "Handler": "py/Feedback.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["ExampleLambdaRole", "Arn"]},
        "Runtime": "python3.6",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "Example"}]
      }
    },
    "ExamplePYTHONLambdaNext": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/examples.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "ExampleCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Ref": "Index"},
            "FIREHOSE_NAME": {"Ref": "FeedbackFirehoseName"},
            "ES_ADDRESS": {"Ref": "ESAddress"},
            "QUIZ_KMS_KEY": {"Ref": "QuizKey"},
            "SNS_TOPIC_ARN": {"Ref": "FeedbackSNS"},
            "CFSTACK": {"Ref": "AWS::StackName"}
          }
        },
        "Handler": "py/Next.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["ExampleLambdaRole", "Arn"]},
        "Runtime": "python3.6",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "Example"}]
      }
    },
    "ExamplePYTHONLambdaPrevious": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/examples.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "ExampleCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Ref": "Index"},
            "FIREHOSE_NAME": {"Ref": "FeedbackFirehoseName"},
            "ES_ADDRESS": {"Ref": "ESAddress"},
            "QUIZ_KMS_KEY": {"Ref": "QuizKey"},
            "SNS_TOPIC_ARN": {"Ref": "FeedbackSNS"},
            "CFSTACK": {"Ref": "AWS::StackName"}
          }
        },
        "Handler": "py/Previous.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["ExampleLambdaRole", "Arn"]},
        "Runtime": "python3.6",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "Example"}]
      }
    },
    "ExamplePYTHONLambdahello": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/examples.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "ExampleCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Ref": "Index"},
            "FIREHOSE_NAME": {"Ref": "FeedbackFirehoseName"},
            "ES_ADDRESS": {"Ref": "ESAddress"},
            "QUIZ_KMS_KEY": {"Ref": "QuizKey"},
            "SNS_TOPIC_ARN": {"Ref": "FeedbackSNS"},
            "CFSTACK": {"Ref": "AWS::StackName"}
          }
        },
        "Handler": "py/hello.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["ExampleLambdaRole", "Arn"]},
        "Runtime": "python3.6",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "Example"}]
      }
    },
    "FeedbackSNS": {"Type": "AWS::SNS::Topic"},
    "feedbacksnspolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "MysnsTopicPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "My-statement-id",
              "Effect": "Allow",
              "Principal": {"AWS": {"Fn::Sub": "${AWS::AccountId}"}},
              "Action": [
                "SNS:GetTopicAttributes",
                "SNS:SetTopicAttributes",
                "SNS:AddPermission",
                "SNS:RemovePermission",
                "SNS:DeleteTopic",
                "SNS:Subscribe",
                "SNS:ListSubscriptionsByTopic",
                "SNS:Publish",
                "SNS:Receive"
              ],
              "Resource": "*"
            }
          ]
        },
        "Topics": [{"Ref": "FeedbackSNS"}]
      }
    },
    "InvokePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["lambda:InvokeFunction"],
              "Resource": [
                {"Fn::GetAtt": ["ExampleJSLambdaQuiz", "Arn"]},
                {"Fn::GetAtt": ["ExampleJSLambdahook", "Arn"]},
                {"Fn::GetAtt": ["ExamplePYTHONLambdaBotBroker", "Arn"]},
                {"Fn::GetAtt": ["ExamplePYTHONLambdaConnectCallback", "Arn"]},
                {"Fn::GetAtt": ["ExamplePYTHONLambdaFeedback", "Arn"]},
                {"Fn::GetAtt": ["ExamplePYTHONLambdaNext", "Arn"]},
                {"Fn::GetAtt": ["ExamplePYTHONLambdaPrevious", "Arn"]},
                {"Fn::GetAtt": ["ExamplePYTHONLambdahello", "Arn"]}
              ]
            }
          ]
        },
        "Roles": [{"Ref": "FulfillmentLambdaRole"}]
      }
    },
    "QuizKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "QNABot Internal KMS CMK for quiz workflow",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [
            {
              "Sid": "Allow administration of the key",
              "Effect": "Allow",
              "Principal": {"AWS": {"Ref": "AWS::AccountId"}},
              "Action": ["kms:*"],
              "Resource": "*"
            },
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": {"Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"}
              },
              "Action": "kms:*",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "LambdaHookExamples": {
      "Type": "Custom::QnABotExamples",
      "Properties": {
        "QuizJS": {"Ref": "ExampleJSLambdaQuiz"},
        "hookJS": {"Ref": "ExampleJSLambdahook"},
        "BotBrokerPY": {"Ref": "ExamplePYTHONLambdaBotBroker"},
        "ConnectCallbackPY": {"Ref": "ExamplePYTHONLambdaConnectCallback"},
        "FeedbackPY": {"Ref": "ExamplePYTHONLambdaFeedback"},
        "NextPY": {"Ref": "ExamplePYTHONLambdaNext"},
        "PreviousPY": {"Ref": "ExamplePYTHONLambdaPrevious"},
        "helloPY": {"Ref": "ExamplePYTHONLambdahello"},
        "ServiceToken": {"Fn::GetAtt": ["ExampleWriteLambda", "Arn"]},
        "photos": {"Fn::Sub": "${ApiUrlName}/examples/photos"},
        "Bucket": {"Ref": "AssetBucket"},
        "version": {"Ref": "ExampleCodeVersion"}
      }
    },
    "ExampleCodeVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "Bucket": {"Ref": "BootstrapBucket"},
        "Key": {"Fn::Sub": "${BootstrapPrefix}/lambda/examples.zip"},
        "BuildDate": "2021-08-17T02:31:30.626Z"
      }
    },
    "ExampleWriteLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/examples.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "ExampleCodeVersion"}
        },
        "Handler": "cfn.handler",
        "MemorySize": "128",
        "Role": {"Ref": "CFNLambdaRole"},
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "CustomResource"}]
      }
    },
    "ExampleLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LambdaFeedbackFirehoseQNALambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["kms:Encrypt", "kms:Decrypt"],
                  "Resource": {"Fn::GetAtt": ["QuizKey", "Arn"]}
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":function:qna-*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":function:QNA-*"
                        ]
                      ]
                    },
                    {"Ref": "QIDLambdaArn"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["firehose:PutRecord", "firehose:PutRecordBatch"],
                  "Resource": [{"Ref": "FeedbackFirehose"}]
                }
              ]
            }
          },
          {
            "PolicyName": "SNSQNALambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["sns:Publish"],
                  "Resource": {"Ref": "FeedbackSNS"}
                }
              ]
            }
          },
          {
            "PolicyName": "LexQNALambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["lex:PostText"],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lex:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":bot:*",
                          ":qna*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lex:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":bot:*",
                          ":QNA*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "LambdaQnABotStdExecution",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": [
                    "arn:aws:lambda:*:*:function:qna-*",
                    "arn:aws:lambda:*:*:function:QNA-*",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:*:*:function:",
                          {
                            "Fn::Select": [
                              "0",
                              {"Fn::Split": ["-", {"Ref": "AWS::StackName"}]}
                            ]
                          },
                          "-*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["cloudformation:DescribeStacks"],
                  "Resource": [{"Ref": "AWS::StackId"}]
                }
              ]
            }
          },
          {
            "PolicyName": "KendraFeedback",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["kendra:SubmitFeedback"],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
          "arn:aws:iam::aws:policy/AmazonKendraReadOnlyAccess"
        ]
      }
    },
    "EXTCreateRecentTopicsResponse": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {"Ref": "BootstrapPrefix"},
                "/lambda/EXTCreateRecentTopicsResponse.zip"
              ]
            ]
          },
          "S3ObjectVersion": {"Ref": "CodeVersionCreateRecentTopicsResponse"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Ref": "Index"},
            "FIREHOSE_NAME": {"Ref": "FeedbackFirehoseName"},
            "ES_ADDRESS": {"Ref": "ESAddress"},
            "QUIZ_KMS_KEY": {"Ref": "QuizKey"}
          }
        },
        "Handler": "CreateRecentTopicsResponse.handler",
        "MemorySize": "2048",
        "Role": {"Fn::GetAtt": ["ExtensionLambdaRole", "Arn"]},
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "LambdaHook"}]
      }
    },
    "EXTCustomJSHook": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/EXTCustomJSHook.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "CodeVersionCustomJSHook"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Ref": "Index"},
            "FIREHOSE_NAME": {"Ref": "FeedbackFirehoseName"},
            "ES_ADDRESS": {"Ref": "ESAddress"},
            "QUIZ_KMS_KEY": {"Ref": "QuizKey"}
          }
        },
        "Handler": "CustomJSHook.handler",
        "MemorySize": "2048",
        "Role": {"Fn::GetAtt": ["ExtensionLambdaRole", "Arn"]},
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "LambdaHook"}]
      }
    },
    "EXTCustomPYHook": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/EXTCustomPYHook.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "CodeVersionCustomPYHook"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Ref": "Index"},
            "FIREHOSE_NAME": {"Ref": "FeedbackFirehoseName"},
            "ES_ADDRESS": {"Ref": "ESAddress"},
            "QUIZ_KMS_KEY": {"Ref": "QuizKey"},
            "PYTHONPATH": "/var/task/py_modules:/var/runtime:/opt/python"
          }
        },
        "Handler": "CustomPYHook.handler",
        "MemorySize": "2048",
        "Role": {"Fn::GetAtt": ["ExtensionLambdaRole", "Arn"]},
        "Runtime": "python3.6",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "LambdaHook"}]
      }
    },
    "CodeVersionCreateRecentTopicsResponse": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "Bucket": {"Ref": "BootstrapBucket"},
        "Key": {
          "Fn::Sub": "${BootstrapPrefix}/lambda/EXTCreateRecentTopicsResponse.zip"
        },
        "BuildDate": "2021-08-17T02:31:30.628Z"
      }
    },
    "CodeVersionCustomJSHook": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "Bucket": {"Ref": "BootstrapBucket"},
        "Key": {"Fn::Sub": "${BootstrapPrefix}/lambda/EXTCustomJSHook.zip"},
        "BuildDate": "2021-08-17T02:31:30.628Z"
      }
    },
    "CodeVersionCustomPYHook": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "Bucket": {"Ref": "BootstrapBucket"},
        "Key": {"Fn::Sub": "${BootstrapPrefix}/lambda/EXTCustomPYHook.zip"},
        "BuildDate": "2021-08-17T02:31:30.628Z"
      }
    },
    "EXTUiImport": {
      "Type": "Custom::ExtensionsUiImport",
      "Properties": {
        "CreateRecentTopicsResponseJS": {
          "Ref": "EXTCreateRecentTopicsResponse"
        },
        "CustomJSHookJS": {"Ref": "EXTCustomJSHook"},
        "CustomPYHookPY": {"Ref": "EXTCustomPYHook"},
        "ServiceToken": {"Fn::GetAtt": ["EXTUiImportLambda", "Arn"]},
        "photos": {"Fn::Sub": "${ApiUrlName}/examples/photos"},
        "Bucket": {"Ref": "AssetBucket"},
        "version": {"Ref": "EXTUiImportVersion"}
      }
    },
    "EXTUiImportLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BootstrapBucket"},
          "S3Key": {
            "Fn::Join": [
              "",
              [{"Ref": "BootstrapPrefix"}, "/lambda/EXTUiImports.zip"]
            ]
          },
          "S3ObjectVersion": {"Ref": "EXTUiImportVersion"}
        },
        "Handler": "ui_import.handler",
        "MemorySize": "128",
        "Role": {"Ref": "CFNLambdaRole"},
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SubnetIds": {"Fn::Split": [",", {"Ref": "VPCSubnetIdList"}]},
              "SecurityGroupIds": {
                "Fn::Split": [",", {"Ref": "VPCSecurityGroupIdList"}]
              }
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "TracingConfig": {
          "Fn::If": ["XRAYEnabled", {"Mode": "Active"}, {"Ref": "AWS::NoValue"}]
        },
        "Tags": [{"Key": "Type", "Value": "CustomResource"}]
      }
    },
    "EXTUiImportVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Ref": "CFNLambda"},
        "Bucket": {"Ref": "BootstrapBucket"},
        "Key": {"Fn::Sub": "${BootstrapPrefix}/lambda/EXTUiImports.zip"},
        "BuildDate": "2021-08-17T02:31:30.629Z"
      }
    },
    "ExtensionsInvokePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["lambda:InvokeFunction"],
              "Resource": [
                {"Fn::GetAtt": ["EXTCreateRecentTopicsResponse", "Arn"]},
                {"Fn::GetAtt": ["EXTCustomJSHook", "Arn"]},
                {"Fn::GetAtt": ["EXTCustomPYHook", "Arn"]}
              ]
            }
          ]
        },
        "Roles": [{"Ref": "FulfillmentLambdaRole"}]
      }
    },
    "ExtensionLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LambdaFeedbackFirehoseQNALambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["kms:Encrypt", "kms:Decrypt"],
                  "Resource": {"Fn::GetAtt": ["QuizKey", "Arn"]}
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":function:qna-*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":function:QNA-*"
                        ]
                      ]
                    },
                    {"Ref": "QIDLambdaArn"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["firehose:PutRecord", "firehose:PutRecordBatch"],
                  "Resource": [{"Ref": "FeedbackFirehose"}]
                }
              ]
            }
          },
          {
            "PolicyName": "LexQNALambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["lex:PostText"],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lex:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":bot:*",
                          ":qna*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lex:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":bot:*",
                          ":QNA*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess"
        ]
      }
    }
  },
  "Conditions": {
    "VPCEnabled": {
      "Fn::Not": [{"Fn::Equals": ["", {"Ref": "VPCSecurityGroupIdList"}]}]
    },
    "XRAYEnabled": {"Fn::Equals": [{"Ref": "XraySetting"}, "TRUE"]},
    "CreateLexV1Bots": {
      "Fn::Equals": [{"Ref": "LexBotVersion"}, "LexV1 and LexV2"]
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "QnABot nested example resources",
  "Mappings": {},
  "Outputs": {
    "ExampleJSLambdaQuiz": {
      "Value": {"Fn::GetAtt": ["ExampleJSLambdaQuiz", "Arn"]}
    },
    "ExampleJSLambdahook": {
      "Value": {"Fn::GetAtt": ["ExampleJSLambdahook", "Arn"]}
    },
    "ExamplePYTHONLambdaBotBroker": {
      "Value": {"Fn::GetAtt": ["ExamplePYTHONLambdaBotBroker", "Arn"]}
    },
    "ExamplePYTHONLambdaConnectCallback": {
      "Value": {"Fn::GetAtt": ["ExamplePYTHONLambdaConnectCallback", "Arn"]}
    },
    "ExamplePYTHONLambdaFeedback": {
      "Value": {"Fn::GetAtt": ["ExamplePYTHONLambdaFeedback", "Arn"]}
    },
    "ExamplePYTHONLambdaNext": {
      "Value": {"Fn::GetAtt": ["ExamplePYTHONLambdaNext", "Arn"]}
    },
    "ExamplePYTHONLambdaPrevious": {
      "Value": {"Fn::GetAtt": ["ExamplePYTHONLambdaPrevious", "Arn"]}
    },
    "ExamplePYTHONLambdahello": {
      "Value": {"Fn::GetAtt": ["ExamplePYTHONLambdahello", "Arn"]}
    },
    "EXTCreateRecentTopicsResponse": {
      "Value": {"Fn::GetAtt": ["EXTCreateRecentTopicsResponse", "Arn"]}
    },
    "EXTCustomJSHook": {"Value": {"Fn::GetAtt": ["EXTCustomJSHook", "Arn"]}},
    "EXTCustomPYHook": {"Value": {"Fn::GetAtt": ["EXTCustomPYHook", "Arn"]}},
    "QNAWage": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNAWage"},
            "/",
            {"Ref": "ResponseBotQNAWageAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNASocialSecurity": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNASocialSecurity"},
            "/",
            {"Ref": "ResponseBotQNASocialSecurityAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNAPinNoConfirm": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNAPinNoConfirm"},
            "/",
            {"Ref": "ResponseBotQNAPinNoConfirmAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNAPin": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNAPin"},
            "/",
            {"Ref": "ResponseBotQNAPinAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNAYesNo": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNAYesNo"},
            "/",
            {"Ref": "ResponseBotQNAYesNoAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNAYesNoExit": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNAYesNoExit"},
            "/",
            {"Ref": "ResponseBotQNAYesNoExitAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNADate": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNADate"},
            "/",
            {"Ref": "ResponseBotQNADateAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNADateNoConfirm": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNADateNoConfirm"},
            "/",
            {"Ref": "ResponseBotQNADateNoConfirmAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNADayOfWeek": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNADayOfWeek"},
            "/",
            {"Ref": "ResponseBotQNADayOfWeekAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNAMonthNoConfirm": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNAMonthNoConfirm"},
            "/",
            {"Ref": "ResponseBotQNAMonthNoConfirmAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNANumber": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNANumber"},
            "/",
            {"Ref": "ResponseBotQNANumberAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNANumberNoConfirm": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNANumberNoConfirm"},
            "/",
            {"Ref": "ResponseBotQNANumberNoConfirmAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNAAge": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNAAge"},
            "/",
            {"Ref": "ResponseBotQNAAgeAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNAPhoneNumber": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNAPhoneNumber"},
            "/",
            {"Ref": "ResponseBotQNAPhoneNumberAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNAPhoneNumberNoConfirm": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNAPhoneNumberNoConfirm"},
            "/",
            {"Ref": "ResponseBotQNAPhoneNumberNoConfirmAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNATime": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNATime"},
            "/",
            {"Ref": "ResponseBotQNATimeAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNAEmailAddress": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNAEmailAddress"},
            "/",
            {"Ref": "ResponseBotQNAEmailAddressAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "QNAName": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "LexV2::",
            {"Ref": "ResponseBotQNAName"},
            "/",
            {"Ref": "ResponseBotQNANameAlias"},
            "/",
            "en_US"
          ]
        ]
      }
    },
    "FeedbackSNSTopic": {"Value": {"Fn::GetAtt": ["FeedbackSNS", "TopicName"]}}
  },
  "Parameters": {
    "FulfillmentLambdaRole": {"Type": "String"},
    "QnAType": {"Type": "String"},
    "QuizType": {"Type": "String"},
    "Index": {"Type": "String"},
    "ESAddress": {"Type": "String"},
    "BootstrapBucket": {"Type": "String"},
    "BootstrapPrefix": {"Type": "String"},
    "FeedbackFirehose": {"Type": "String"},
    "FeedbackFirehoseName": {"Type": "String"},
    "CFNLambda": {"Type": "String"},
    "CFNLambdaRole": {"Type": "String"},
    "LexV2CFNLambdaARN": {"Type": "String"},
    "LexV2ServiceLinkedRoleARN": {"Type": "String"},
    "ApiUrlName": {"Type": "String"},
    "AssetBucket": {"Type": "String"},
    "QIDLambdaArn": {"Type": "String"},
    "VPCSubnetIdList": {"Type": "String"},
    "VPCSecurityGroupIdList": {"Type": "String"},
    "LexBotVersion": {"Type": "String"},
    "XraySetting": {"Type": "String"}
  }
}
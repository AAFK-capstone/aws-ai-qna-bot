{
  "Resources": {
    "Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "VersioningConfiguration": {"Status": "Enabled"},
        "LifecycleConfiguration": {
          "Rules": [
            {"Status": "Enabled", "NoncurrentVersionExpirationInDays": 1}
          ]
        }
      }
    },
    "Clear": {
      "Type": "Custom::S3Clear",
      "DependsOn": ["CFNLambdaPolicy"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "Bucket"}
      }
    },
    "CFNLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.handler = function(event, context) {\n    console.log(JSON.stringify(event,null,2))\n\n    if(event.RequestType===\"Delete\"){\n        Delete(event.ResourceProperties)\n        .then(()=>send(event, context, SUCCESS))\n        .catch(x=>{\n            console.log(x)\n            send(event, context, FAILED)\n        })\n    }else{\n        send(event, context, SUCCESS)\n    }\n}\n\nfunction Delete(params){\n    return new Promise(function(res,rej){\n        function next(){\n            s3.listObjectVersions({\n                Bucket:params.Bucket\n            }).promise()\n            .then(x=>x.Versions.concat(x.DeleteMarkers))\n            .then(function(files){\n                return files.map(file=>{return {\n                    Key:file.Key,\n                    VersionId:file.VersionId\n                }  })\n            })\n            .then(function(keys){\n                console.log(\"going to delete\",keys)\n                if(keys.length>0){ \n                    return s3.deleteObjects({\n                        Bucket:params.Bucket,\n                        Delete:{\n                            Objects:keys\n                        }\n                    }).promise()\n                    .then(()=>next())\n                    .catch(rej)\n                }else{\n                    res()\n                }\n            })\n        }\n        next()\n    })\n}\nconst SUCCESS = \"SUCCESS\";\nconst FAILED = \"FAILED\";\n\nfunction send(event, context, responseStatus, responseData, physicalResourceId, noEcho) {\n\n    var responseBody = JSON.stringify({\n        Status: responseStatus,\n        Reason: \"See the details in CloudWatch Log Stream: \" + context.logStreamName,\n        PhysicalResourceId: physicalResourceId || context.logStreamName,\n        StackId: event.StackId,\n        RequestId: event.RequestId,\n        LogicalResourceId: event.LogicalResourceId,\n        NoEcho: noEcho || false,\n        Data: responseData\n    });\n\n    console.log(\"Response body:\\n\", responseBody);\n\n    var https = require(\"https\");\n    var url = require(\"url\");\n\n    var parsedUrl = url.parse(event.ResponseURL);\n    var options = {\n        hostname: parsedUrl.hostname,\n        port: 443,\n        path: parsedUrl.path,\n        method: \"PUT\",\n        headers: {\n            \"content-type\": \"\",\n            \"content-length\": responseBody.length\n        }\n    };\n\n    var request = https.request(options, function(response) {\n        console.log(\"Status code: \" + response.statusCode);\n        console.log(\"Status message: \" + response.statusMessage);\n        context.done();\n    });\n\n    request.on(\"error\", function(error) {\n        console.log(\"send(..) failed executing https.request(..): \" + error);\n        context.done();\n    });\n\n    request.write(responseBody);\n    request.end();\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["CFNLambdaRole", "Arn"]},
        "Runtime": "nodejs12.x",
        "Timeout": 60
      }
    },
    "CFNLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "CFNLambdaPolicy"}
        ]
      }
    },
    "CFNLambdaPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:*"],
              "Resource": [{"Fn::Sub": "arn:aws:s3:::${Bucket}*"}]
            }
          ]
        }
      }
    },
    "ReadPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Condition": "Public",
      "Properties": {
        "Bucket": {"Ref": "Bucket"},
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadForGetBucketObjects",
              "Effect": "Allow",
              "Principal": {"AWS": "*"},
              "Action": ["s3:Get*", "s3:List*"],
              "Resource": [{"Fn::Sub": "arn:aws:s3:::${Bucket}*"}]
            }
          ]
        }
      }
    }
  },
  "Conditions": {"Public": {"Fn::Equals": [{"Ref": "Public"}, "PUBLIC"]}},
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Bootstrap bucket for QnABot assets",
  "Mappings": {},
  "Outputs": {
    "Bucket": {"Value": {"Ref": "Bucket"}},
    "Prefix": {"Value": "artifacts/aws-ai-qna-bot"}
  },
  "Parameters": {"Public": {"Type": "String", "Default": "PRIVATE"}}
}